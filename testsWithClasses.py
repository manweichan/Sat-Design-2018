# -*- coding: utf-8 -*-
"""
Created on Thu Apr 19 16:27:00 2018

@author: wcgru
"""

from classDefinitions import Servicer, Thruster
import numpy as np
import matplotlib.pyplot as plt

# plt.ion()  # To immediately show plots

from astropy import units as u

from poliastro.bodies import Earth, Mars, Sun
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver

#%% example multi-y plot (.xtwin method on the axes objects)

"""
===========================
Plots with different scales
===========================

Demonstrate how to do two plots on the same axes with different left and
right scales.

The trick is to use *two different axes* that share the same *x* axis.
You can use separate `matplotlib.ticker` formatters and locators as
desired since the two axes are independent.

Such axes are generated by calling the `Axes.twinx` method.  Likewise,
`Axes.twiny` is available to generate axes that share a *y* axis but
have different top and bottom scales.

The twinx and twiny methods are also exposed as pyplot functions.

"""

fig, ax1 = plt.subplots()
t = np.arange(0.01, 10.0, 0.01)
s1 = np.exp(t)
ax1.plot(t, s1, 'b-')
ax1.set_xlabel('time (s)')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('exp', color='b')
ax1.tick_params('y', colors='b')

ax2 = ax1.twinx()
s2 = np.sin(2 * np.pi * t)
ax2.plot(t, s2, 'r.')
ax2.set_ylabel('sin', color='r')
ax2.tick_params('y', colors='r')

fig.tight_layout()
plt.show()

#%% Using pertrubations to change RAAN
J2 = 0.0010826

# I can find the mean motion (n) just by using the astropy orbit class and calling object.n (same for semi-major axis)
initialOrbit = Orbit.circular(Earth, alt = 705e3 * u.m, inc = 98.6 * u.deg)

del_i_array = np.linspace(3,30) * np.pi/180
del_v_array = np.zeros(np.shape(del_i_array))
months_change = np.zeros(np.shape(del_i_array))

#==============================================================================
# # from Manwei
# #Function takes in two orbit objects from poliastro
# #and returns the delta V value for the plane change
# #in km/s. Assumes orbites are circular.
# def inc_change_delV(orbit1, orbit2):
# 	inc1 = orbit1.inc
# 	inc2 = orbit2.inc
# 	delI = inc2 - inc1
# 	delIrad = delI * np.pi/180
# 	print(delIrad)
# 	v = np.linalg.norm(orbit1.v)
# 	delV = 2*v*np.sin(delIrad.value/2)
# 	return delV
#==============================================================================

# TERRA RAAN (part of AM-1 Train): 251.313 deg
# A-TRAIN RAAN: 285.6451 deg

# so if we demo we can do ~ 60 degrees of RAAN with this then that should be sufficient
for i in range(len(del_i_array)):
    del_i  = del_i_array[i]
    orbit_inc = (initialOrbit.inc.value * np.pi/180) - del_i
    dRAANdot_dDeltai = np.sin(orbit_inc)*3*J2*initialOrbit.n*Earth.R**2/(2*initialOrbit.a**2*(1-initialOrbit.ecc**2)**2)
    
    
    del_RAAN = 60 *np.pi/180 *u.rad
    
    sec_change = del_RAAN / (dRAANdot_dDeltai * del_i)
    del_v_array[i] = 2*2*np.linalg.norm(initialOrbit.v) *np.sin(del_i/2)
    months_change[i] = sec_change.value / (3600*24*30)

    # it will just be twice the original cost since it is only a function of orbital velocity and amount of change
    
    
# 60 degrees of RAAN change takes 2.

fig2, ax1 = plt.subplots()

ax1.plot(np.asarray(del_i_array)*180/np.pi,months_change,'b')
ax1.set_xlabel('Degrees of inclination difference (subtracted from initial orbit)')
ax1.set_ylabel('Number of Months in Drift State',color='b')
#plt.legend(['number of service missions ( ' + str(serviceMissionDelV) +' m/s each)','number of ' + str(delI) +'  deg inclination changes'])
ax1.set_title('Starting Servicer Orbit: ' + str(initialOrbit) + ' \n Months of Drift & Cost in Delta-V to execute a 60 degree RAAN Change from drift only')

ax2 = ax1.twinx()

# put cost of inclination change manuever on the right side of the plot
# (need to google how to do this with matplotlib)
ax2.plot(np.asarray(del_i_array)*180/np.pi,del_v_array,'r')
ax2.set_ylabel('Total Delta-V cost of maneuver (km/s)',color='r')
#plt.legend(['number of service missions ( ' + str(serviceMissionDelV) +' m/s each)','number of ' + str(delI) +'  deg inclination changes'])plt.title('Starting Servicer Orbit: ' + str(initialOrbit) + ' \n km/s cost to execute a 60 degree RAAN Change from drift only')
plt.show()

# baseline for the paper: with a 4.65 degree inclination change (executed twice), we have a total cost of 1.22 km/s delta-V and it will be drifting for roughly 3.5 months
#%% servicer class demos
max_servicer_mass = 11000 # kg

dry_mass = 5000 # kg
wet_mass = max_servicer_mass - dry_mass 

numRatios = 50
ratioOfContinuousMassFuel = np.linspace(0.01,0.99,numRatios)

# set up parameters relevant to servicing mission profile
delI = 15# degrees 
# (total delta V for an average servicing mission)
serviceMissionDelV = 70 # m/s 
numberTrackingArray = np.zeros((numRatios,2))

# Set up orbit
initialOrbit = Orbit.circular(Earth, alt = 700e3 * u.m, inc = 98.6 * u.deg)

# Set up thrusters to use in the servicer
# based on  MONARC-445
Isp_imp = 235
thrust_imp  = 445
impulsiveThruster1 = Thruster(Isp = Isp_imp  , thrust = thrust_imp , engineMass = 1.6, power= 10)

impStr = 'Impulsive Thruster, Isp = ' +str (Isp_imp) + 's, thrust = ' + str(thrust_imp) + 'N'
mass_per_kw = 7 
# based on XIPS-13 Ion Engine
#==============================================================================
# xips_power = 0.42 #kw
# Isp_cont = 2500
# thrust_cont = 17.2 * 0.001
#==============================================================================

# based on XIPS-25 Ion Engine
xips_power = 2 #kw
Isp_cont = 3500
thrust_cont = 80* 0.001
contStr = 'Continuous Thruster, Isp = ' +str (Isp_cont) + 's, thrust = ' + str(thrust_cont) + 'N'
continuousThruster1 = Thruster(Isp = Isp_cont , thrust = thrust_cont, engineMass =mass_per_kw*xips_power , power= xips_power*1000)

# First analysis will be to compare the total number of missions and number of inclination changes based on fuel ratios
i = 0
for c_to_total_ratio in ratioOfContinuousMassFuel :
    impulsiveFuelMass = wet_mass * (1-c_to_total_ratio)
    continuousFuelMass = wet_mass * c_to_total_ratio
    servicer1 =  Servicer(initialOrbit, dryMass = dry_mass, \
                          impulsiveThruster = impulsiveThruster1, impulsiveFuelMass = impulsiveFuelMass , \
                          continuousThruster = continuousThruster1, continuousFuelMass = continuousFuelMass)
    
    numServiceMissions = 0
    numInclinationChanges = 0
    fuelRemaining = True
    continuousFuel = True
    impulsiveFuel = True
    counter = 0
    
    while fuelRemaining:
        if servicer1.execute_plane_change(delI,thrusterSelection = "continuous"):
            numInclinationChanges += 1
        else:
            continuousFuel = False

        if servicer1.execute_nominal_service_mission(serviceMissionDelV):
            numServiceMissions += 1
        else:
            impulsiveFuel  = False
            
        if not continuousFuel and not impulsiveFuel:
            fuelRemaining = False
            
        counter += 1
        #print('Number of fuel loops = ' + str(counter))

    numberTrackingArray[i,0] = numServiceMissions
    numberTrackingArray[i,1] = numInclinationChanges
    #print('On ratio loop: ' + str(i))
    i += 1

#%% Plots for Number of Missions Analysis

plt.plot(ratioOfContinuousMassFuel,numberTrackingArray)
plt.xlabel('Ratio of Continuous Thruster Fuel Mass to Total Fuel Mass')
plt.ylabel('Number of Missions')
plt.legend(['number of service missions ( ' + str(serviceMissionDelV) +' m/s each)','number of ' + str(delI) +'  deg inclination changes'])
plt.title('Starting Servicer Orbit: ' + str(servicer1.orbit) +'\n Total Servicer Mass: ' + str(max_servicer_mass)+' Total Fuel Mass: ' +str(wet_mass) + 'kg \n' + impStr + '\n' + contStr)

#%% More Detailed Analysis for Plane Changes
# next analysis will be to compare the amount of time / fuel / power it takes to execute a plane change for different continuous thrusters
delI = 15

# let's just take a 50% ratio between impulsive and continuous thrust fuel
# let's try a hall effect thruster (TsNIIMASH)

xips_power = 3.0 #kw
Isp_cont = 2000
thrust_cont = 1777* 0.001

continuousThruster1 = Thruster(Isp = Isp_cont , thrust = thrust_cont, engineMass =mass_per_kw*xips_power , power= xips_power*1000)

c_to_total_ratio = 0.5
impulsiveFuelMass = wet_mass * (1-c_to_total_ratio)
continuousFuelMass = wet_mass * c_to_total_ratio 
servicer1 =  Servicer(initialOrbit, dryMass = dry_mass, \
                          impulsiveThruster = impulsiveThruster1, impulsiveFuelMass = impulsiveFuelMass , \
                          continuousThruster = continuousThruster1, continuousFuelMass = continuousFuelMass)


(delV, time) = servicer1.execute_plane_change(delI,thrusterSelection = "continuous")

# Try using half of all impulsive thruster fuel first:
print('Total Delta-V required: ' + str(delV *0.001) + 'km/s')
print('Inclination Change of ' + str(delI) + ' deg, takes ' + str(time/(3600*24)) + ' days')


#%% Power is super important!
# make a plot of OAP vs. inclination change costs and time ( look for inflection points) 
# look at hall effect thruster (SME:SMAD), NEXT ion thruster (NASA paper), and other ion thrusters (SME:SMAD)

J2 = -0.0001152
# calculate n (mean motion) from obital height and mu
a_e = 6371; # km, radius of the Earth.
#%% Mission Based plots
# take a certain mission profile (X number refuels, Y numberr replacements, etc) and calculate revenue over time.

# should I make a separate mission class? or just have a servicer take in a mission one by one and have a mission directionary
